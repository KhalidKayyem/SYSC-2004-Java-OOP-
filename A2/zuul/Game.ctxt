#BlueJ class context
comment0.target=Game
comment0.text=\r\n\ The\ Game\ class\ is\ the\ main\ class\ of\ the\ "World\ of\ Zuul"\ application.\ \r\n\ "World\ of\ Zuul"\ is\ a\ simple\ text-based\ adventure\ game\ where\ users\ \r\n\ can\ explore\ different\ rooms,\ interact\ with\ items,\ and\ navigate\ using\ commands.\r\n\ \r\n\ To\ play\ this\ game,\ create\ an\ instance\ of\ this\ class\ and\ call\ the\ "play"\ method.\r\n\ \r\n\ This\ class\ is\ responsible\ for\ setting\ up\ the\ game\ by\ creating\ rooms,\ \r\n\ placing\ items,\ and\ managing\ user\ input.\ It\ processes\ commands\ that\ allow\ \r\n\ players\ to\ move\ between\ rooms,\ inspect\ their\ surroundings,\ interact\ with\ \r\n\ objects,\ and\ track\ their\ movement\ history\ using\ the\ "back"\ and\ "stackBack"\ commands.\r\n\ \r\n\ The\ game\ includes\ essential\ commands\ such\ as\ moving\ between\ rooms,\ \r\n\ looking\ around,\ eating\ items,\ and\ quitting\ the\ game.\r\n\ \r\n\ @author\ \ Michael\ Kolling\ and\ David\ J.\ Barnes\r\n\ @version\ 2006.03.30\r\n\ \r\n\ @author\ Lynn\ Marshall\r\n\ @version\ October\ 21,\ 2012\r\n\ \r\n\ @author\ Khalid\ Kayyem,\ 101277502\r\n\ @version\ 16-03-2025\r\n
comment1.params=
comment1.target=Game()
comment1.text=\r\n\ Create\ the\ game\ and\ initialise\ its\ internal\ map.\r\n
comment10.params=command
comment10.target=void\ eat(Command)
comment10.text=\r\n\ "Eat"\ Prints\ a\ message\ that\ indicates\ the\ player\ has\ eaten\r\n\ \r\n\ \r\n\ @param\ command\ The\ command\ to\ be\ processed\r\n
comment11.params=command
comment11.target=void\ goBack(Command)
comment11.text=\r\n\ "goBack"\ Moves\ the\ player\ back\ to\ the\ previous\ room\r\n\ \r\n\ \r\n\ @param\ command\ The\ command\ to\ be\ processed\r\n
comment12.params=command
comment12.target=void\ stackBack(Command)
comment12.text=\r\n\ "stackBack"\ Moves\ the\ player\ back\ through\ the\ movement\ history\ stack\r\n\ \r\n\ \r\n\ @param\ command\ The\ command\ to\ be\ processed\r\n
comment13.params=command
comment13.target=void\ take(Command)
comment13.text=\r\n\ take.\ Attempts\ to\ pick\ up\ an\ item\ from\ the\ current\ room.\ This\ method\ checks\ if\ the\ player\ is\ holding\ an\ item\ and\ whether\ the\ specified\ item\r\n\ exists\ in\ the\ room.\ If\ the\ player\ is\ hungry,\ they\ can\ only\ pick\ up\ a\ "cookie".\r\n\ Otherwise,\ the\ item\ is\ added\ to\ the\ player's\ carried\ item\ slot,\ and\ the\ room's\ \r\n\ item\ list\ is\ updated.\r\n\ \r\n\ \r\n\ @param\ command\ The\ command\ containing\ the\ item\ name\ to\ be\ picked\ up.\r\n
comment14.params=command
comment14.target=void\ drop(Command)
comment14.text=\r\n\ drop.\ Drops\ the\ currently\ carried\ item\ into\ the\ current\ room.\ In\ this\ method,\ if\ the\ player\ is\ holding\ an\ item,\ it\ is\ placed\ back\ into\ the\ room,\r\n\ and\ the\ player's\ carried\ item\ slot\ is\ cleared.\ If\ the\ player\ is\ not\r\n\ carrying\ anything,\ a\ message\ is\ displayed\ indicating\ that\ there\ is\r\n\ nothing\ to\ drop.\r\n\ \r\n\ @param\ command\ The\ command\ input\ from\ the\ player.\ (included\ for\ consistency\ but\ not\ used).\r\n
comment15.params=command
comment15.target=void\ charge(Command)
comment15.text=\r\n\ charge.\ Charges\ the\ Beamer\ with\ the\ current\ room.\ This\ method\ checks\ if\ the\ player\ is\ carrying\ a\ Beamer.\ If\ they\ are\ not,\r\n\ an\ error\ message\ is\ displayed.\ If\ the\ player\ is\ holding\ a\ Beamer,\ it\ is\ \r\n\ charged\ with\ the\ current\ room,\ allowing\ future\ teleportation.\r\n\ \r\n\ @param\ command\ The\ command\ input\ from\ the\ player\ (included\ for\ consistency\ but\ not\ used).\r\n
comment16.params=command
comment16.target=void\ fire(Command)
comment16.text=\r\n\ fire.\ This\ method\ Fires\ the\ Beamer\ to\ teleport\ the\ player\ to\ the\ previously\ charged\ room.\r\n\ \r\n\ This\ method\ checks\ if\ the\ player\ is\ carrying\ a\ Beamer.\ If\ they\ are\ not,\r\n\ an\ error\ message\ is\ displayed.\ If\ the\ Beamer\ is\ carried,\ it\ attempts\ to\ \r\n\ teleport\ the\ player\ to\ the\ room\ it\ was\ charged\ in.\ If\ the\ Beamer\ was\ \r\n\ never\ charged,\ the\ teleportation\ fails.\r\n\ \r\n\ @param\ command\ The\ command\ input\ from\ the\ player\ (included\ for\ consistency\ but\ not\ used).\r\n
comment2.params=
comment2.target=void\ createRooms()
comment2.text=\r\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\ Also\ creats\ the\ items\ and\ adds\ them\ to\ the\ rooms\r\n
comment3.params=
comment3.target=void\ play()
comment3.text=\r\n\ \ Main\ play\ routine.\ \ Loops\ until\ end\ of\ play.\r\n
comment4.params=
comment4.target=void\ printWelcome()
comment4.text=\r\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\r\n
comment5.params=command
comment5.target=boolean\ processCommand(Command)
comment5.text=\r\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\r\n\ \r\n\ @param\ command\ The\ command\ to\ be\ processed\r\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise\r\n
comment6.params=
comment6.target=void\ printHelp()
comment6.text=\r\n\ Print\ out\ some\ help\ information.\r\n\ Here\ we\ print\ a\ cryptic\ message\ and\ a\ list\ of\ the\ \r\n\ command\ words.\r\n
comment7.params=command
comment7.target=void\ goRoom(Command)
comment7.text=\ \r\n\ "goRoom"\ Try\ to\ go\ to\ one\ direction.\ If\ there\ is\ an\ exit,\ enter\ the\ new\r\n\ room,\ otherwise\ print\ an\ error\ message.\r\n\ \r\n\ @param\ command\ The\ command\ to\ be\ processed\r\n
comment8.params=command
comment8.target=boolean\ quit(Command)
comment8.text=\ \r\n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\r\n\ whether\ we\ really\ quit\ the\ game.\r\n\ \r\n\ @param\ command\ The\ command\ to\ be\ processed\r\n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise\r\n
comment9.params=command
comment9.target=void\ look(Command)
comment9.text=\r\n\ "Look"\ prints\ the\ description\ of\ the\ current\ room\r\n\ \r\n\ \r\n\ @param\ command\ The\ command\ that\ will\ be\ processed\r\n
numComments=17
